# RssFileGenerator.py
# (C)2013
# Scott Ernst

import datetime

from pyaid.file.FileUtils import FileUtils
from pyaid.time.TimeUtils import TimeUtils
from pyaid.web.mako.MakoRenderer import MakoRenderer

from StaticFlow.StaticFlowEnvironment import StaticFlowEnvironment
from StaticFlow.process.rss.RssEntry import RssEntry

#___________________________________________________________________________________________________ RssFileGenerator
class RssFileGenerator(object):
    """ A XML file generation class for an RSS feed as defined by an RSS block within the defition
        file of a particular page. The elements of the feed consist of the pages included as
        references in the hosting page. """

#===================================================================================================
#                                                                                       C L A S S

    _TEMPLATE = '/rss/rss.mako'

#___________________________________________________________________________________________________ __init__
    def __init__(self, processor, pageData):
        """Creates a new instance of RssFileGenerator."""
        self._processor = processor
        self._pageData  = pageData
        self._entries   = []
        self._processor.rssGenerators.append(self)

#===================================================================================================
#                                                                                   G E T / S E T

#___________________________________________________________________________________________________ GS: title
    @property
    def title(self):
        """ The title for the RSS feed. Defaults to the title of the page in which the feed is
            defined if no title was explicitly set in the RSS definition block."""

        out = self._pageData.get(('RSS', 'TITLE'), None)
        if not out:
            return self._pageData.title
        return out

#___________________________________________________________________________________________________ GS: description
    @property
    def description(self):
        """ The description for the RSS feed. Defaults to the description of the page in which the
            feed was defined if no description was explicitly set in the RSS definition block. """
        out = self._pageData.get(('RSS', 'DESCRIPTION'), None)
        if not out:
            return self._pageData.description
        return out

#___________________________________________________________________________________________________ GS: thumbnail
    @property
    def thumbnail(self):
        """ The absolute URL to the deployed image file for the RSS feed to use as the thumbnail
            image for the entire feed. """
        if self._pageData.thumbnail:
            return self._pageData.thumbnail.getUrl(forceHttp=True, forceDeploy=True)
        return u''

#___________________________________________________________________________________________________ GS: homeUrl
    @property
    def homeUrl(self):
        """ The URL of the home page represented by the RSS feed, not the url to the RSS feed
            itself. See the rssUrl property for the rss.xml file URL."""
        return self._pageData.targetUrl

#___________________________________________________________________________________________________ GS: rssUrl
    @property
    def rssUrl(self):
        """ The URL to the RSS feed generated by this RssGenerator instance."""
        return self.homeUrl + 'rss.xml'

#___________________________________________________________________________________________________ GS: entries
    @property
    def entries(self):
        """ A list of RssEntries that will be included in the rss.xml file. Each one represents a
            referenced page."""
        return self._entries

#___________________________________________________________________________________________________ GS: targetPath
    @property
    def targetPath(self):
        """ Absolute path to the location where the rss file will be generated. """
        return FileUtils.createPath(
            FileUtils.getDirectoryOf(self._pageData.targetPath), 'rss.xml', isFile=True)

#___________________________________________________________________________________________________ GS: compiledTimestamp
    @property
    def compiledTimestamp(self):
        """ The new compilation time for the output RSS file in the appropriate RSS format."""
        return TimeUtils.dateTimeToWebTimestamp(datetime.datetime.utcnow())

#___________________________________________________________________________________________________ GS: lastModifiedTimestamp
    @property
    def lastModifiedTimestamp(self):
        """ Timestamp of the last time a change was made to one or more of the entries in the RSS
            file being generated. """
        if not self._entries:
            return self.compiledTimestamp

        lastDate = self._entries[0].date
        for entry in self._entries[1:]:
            if entry.date > lastDate:
                lastDate = entry.date

        return TimeUtils.dateTimeToWebTimestamp(lastDate)

#===================================================================================================
#                                                                                     P U B L I C

#___________________________________________________________________________________________________ hasPage
    def hasPage(self, page):
        """ Returns whether or not the specified Page is among the entries to be included in the
            rss.xml file generated by this RssGenerator. """
        for entry in self._entries:
            if entry.pageData == page:
                return True
        return False

#___________________________________________________________________________________________________ populate
    def populate(self):
        """ Populates this RssGenerator with the Page entries based on the referencedPages of the
            source Page. This should be run after the source page has been compiled to ensure that
            all necessary Page references have been linked to the page. """

        if not self._pageData.isCompiled:
            self._pageData.site.writeWarningLog(
                u'RSS Generator populated before page was compiled',
                {'PAGE', self._pageData.sourcePath} )
            self._pageData.compile()

        # Create the entry and add a reference to this generator in the rss owners of the page
        for page in self._pageData.referencedPages:
            if not self.hasPage(page):
                self._entries.append(RssEntry(self._processor, self, page))
                page.addRssOwner(self)

        return True

#___________________________________________________________________________________________________ write
    def write(self):
        """ Generates the rss.xml file and saves it to the target location. """

        mr = MakoRenderer(self._TEMPLATE, StaticFlowEnvironment.rootTemplatePath, {'rss':self})
        result = mr.render()
        if not mr.success:
            self._pageData.site.writeErrorLog(mr.errorMessage)
            return False

        result = FileUtils.putContents(result, self.targetPath)
        if result:
            self._pageData.site.writeLogSuccess(u'CREATED', u'RSS File: "%s"' % self.targetPath)
        else:
            self._pageData.site.writeErrorLog(u'Unable to write RSS file "%s"' % self.targetPath)
        return result

#===================================================================================================
#                                                                               I N T R I N S I C

#___________________________________________________________________________________________________ __repr__
    def __repr__(self):
        return self.__str__()

#___________________________________________________________________________________________________ __unicode__
    def __unicode__(self):
        return unicode(self.__str__())

#___________________________________________________________________________________________________ __str__
    def __str__(self):
        return '<%s>' % self.__class__.__name__

